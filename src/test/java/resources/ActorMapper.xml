<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liucan.loda.ActorMapper">
  <!-- 开启本mapper下的namespace的二级缓存，默认使用的是mybatis提供的PerpetualCache -->
  <cache/>

  <resultMap id="actorResultMap" type="actor">
    <id column="actor_id" property="actorId"/>
    <result column="first_name" property="firstName"/>
    <result column="last_name" property="lastName"/>
    <result column="last_update" property="lastUpdate" javaType="java.time.LocalDateTime"/>
    <collection property="filmIds" select="com.liucan.loda.ActorMapper.selectListByActorId" column="actor_id"/>
<!--    <association property="filmIds" select="com.liucan.loda.ActorMapper.selectListByActorId" column="actor_id"/>-->
  </resultMap>

  <resultMap id="filmActorMapResultMap" type="com.liucan.loda.FilmActorMap">
    <result column="actor_id" property="actorId"/>
    <result column="film_id" property="filmId"/>
    <result column="last_update" property="lastUpdate" javaType="java.time.LocalDateTime"/>
  </resultMap>

  <sql id="whereSql">
    first_name
    like '%${value}%'
  </sql>

  <insert id="insertUseGeneratedKeys" parameterType="actor" useGeneratedKeys="true" keyColumn="actor_id"
          keyProperty="actorId">
    INSERT INTO actor (first_name, last_name, last_update)
    values (#{actor.firstName}, #{actor.lastName}, #{actor.lastUpdate})
  </insert>

  <insert id="insertUseSelectKeys" parameterType="actor">
    <selectKey keyProperty="actorId" keyColumn="actor_id" order="AFTER">
      select last_insert_id() as actor_id
    </selectKey>
    INSERT INTO actor (first_name, last_name, last_update) values (#{actor.firstName}, #{actor.lastName},
    #{actor.lastUpdate})
  </insert>

  <!-- 根据id获取用户信息 useCache=false当前查询禁用二级缓存 flushCache是否查询二级缓存-->
  <select id="findUserById" resultMap="actorResultMap" useCache="false">
    select *
    from actor
    where actor_id = #{id}
  </select>

  <select id="findUserByIdAndName" resultMap="actorResultMap">
    select *
    from actor
    where first_name = #{name} and actor_id = #{id}
  </select>

  <select id="selectListUsers"  resultMap="actorResultMap">
    select *
    from actor
  </select>

  <!-- 根据名称模糊查询用户列表 -->
  <select id="findUserByFirstname" parameterType="int" resultMap="actorResultMap">
    select * from actor
    <where>
      <include refid="whereSql"/>
    </where>
  </select>

  <select id="selectListByActorId" parameterType="int" resultMap="filmActorMapResultMap">
    select * from film_actor where actor_id = #{actorId};
  </select>

</mapper>
